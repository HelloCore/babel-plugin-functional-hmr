// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`already a class, should not transform anything 1`] = `
Array [
  "import { TouchableNativeFeedback, Text } from 'react-native';",
  "import React, { Component, PropTypes } from 'react';",
  "export default class Button extends Component {",
  "    render() {",
  "        return <TouchableNativeFeedback onPress={this.props.onPress}>",
  "                <Text style={{ color: 'green' }}>",
  "                    {this.props.title}",
  "                </Text>",
  "            </TouchableNativeFeedback>;",
  "    }",
  "}",
]
`;

exports[`component wrapped in hoc 1`] = `
Array [
  "import { Text } from 'react-native';",
  "import React from 'react';",
  "",
  "const withNumber = number => {",
  "    return BaseComponent => {",
  "        return props => <BaseComponent {...props} number={number} />;",
  "    };",
  "};",
  "",
  "import _react from 'react';",
  "import _reactTransform from 'react-transform-hmr';",
  "",
  "function wrapComponent(id, Component) {",
  "    const t = _reactTransform({",
  "        components: {",
  "            [id]: {",
  "                displayName: id",
  "            }",
  "        },",
  "        locals: [module],",
  "        imports: [_react],",
  "        filename: '%%FILENAME%%'",
  "    });",
  "",
  "    return t(Component, id);",
  "}",
  "",
  "class __Test extends _react.Component {",
  "    render() {",
  "        let { number } = this.props;",
  "        return (<Text>",
  "            Test {number}",
  "        </Text>);",
  "    }",
  "",
  "}",
  "",
  "const Test = wrapComponent('Test', __Test);",
  "",
  "",
  "export default withNumber(3)(Test);",
]
`;

exports[`const with destructure in param, should change 1`] = `
Array [
  "import { TouchableNativeFeedback, Text } from 'react-native';",
  "import React, { Component, PropTypes } from 'react';",
  "",
  "import _react from 'react';",
  "import _reactTransform from 'react-transform-hmr';",
  "",
  "function wrapComponent(id, Component) {",
  "    const t = _reactTransform({",
  "        components: {",
  "            [id]: {",
  "                displayName: id",
  "            }",
  "        },",
  "        locals: [module],",
  "        imports: [_react],",
  "        filename: '%%FILENAME%%'",
  "    });",
  "",
  "    return t(Component, id);",
  "}",
  "",
  "class __Button extends _react.Component {",
  "    render() {",
  "        let { children, layout: { width, height } } = this.props;",
  "        return (<Text style={{ color: 'blue' }} width={width} height={height}>",
  "        {children}",
  "    </Text>);",
  "    }",
  "",
  "}",
  "",
  "const Button = wrapComponent('Button', __Button);",
  "",
  "",
  "export default Button;",
]
`;

exports[`embedded return with argument, should change 1`] = `
Array [
  "import { TouchableNativeFeedback, Text } from 'react-native';",
  "import React, { Component, PropTypes } from 'react';",
  "",
  "import _react from 'react';",
  "import _reactTransform from 'react-transform-hmr';",
  "",
  "function wrapComponent(id, Component) {",
  "    const t = _reactTransform({",
  "        components: {",
  "            [id]: {",
  "                displayName: id",
  "            }",
  "        },",
  "        locals: [module],",
  "        imports: [_react],",
  "        filename: '%%FILENAME%%'",
  "    });",
  "",
  "    return t(Component, id);",
  "}",
  "",
  "class __Button extends _react.Component {",
  "    render() {",
  "        let { title } = this.props;",
  "        return (<Text style={{ color: 'blue' }}>",
  "            {title}",
  "        </Text>);",
  "    }",
  "",
  "}",
  "",
  "const Button = wrapComponent('Button', __Button);",
  "",
  "",
  "export default Button;",
]
`;

exports[`embedded return with argument, should change 2`] = `
Array [
  "import { TouchableNativeFeedback, Text } from 'react-native';",
  "import React, { Component, PropTypes } from 'react';",
  "",
  "import _react from 'react';",
  "import _reactTransform from 'react-transform-hmr';",
  "",
  "function wrapComponent(id, Component) {",
  "    const t = _reactTransform({",
  "        components: {",
  "            [id]: {",
  "                displayName: id",
  "            }",
  "        },",
  "        locals: [module],",
  "        imports: [_react],",
  "        filename: '%%FILENAME%%'",
  "    });",
  "",
  "    return t(Component, id);",
  "}",
  "",
  "class __Button extends _react.Component {",
  "    render() {",
  "        let { title } = this.props;",
  "",
  "        const string = title.toUpperCase();",
  "        const sum = 1 + 2;",
  "        return (<Text style={{ color: 'blue' }}>",
  "            {string}",
  "        </Text>);",
  "    }",
  "",
  "}",
  "",
  "const Button = wrapComponent('Button', __Button);",
  "",
  "",
  "export default Button;",
]
`;

exports[`embedded return, should change 1`] = `
Array [
  "import { TouchableNativeFeedback, Text } from 'react-native';",
  "import React, { Component, PropTypes } from 'react';",
  "",
  "import _react from 'react';",
  "import _reactTransform from 'react-transform-hmr';",
  "",
  "function wrapComponent(id, Component) {",
  "    const t = _reactTransform({",
  "        components: {",
  "            [id]: {",
  "                displayName: id",
  "            }",
  "        },",
  "        locals: [module],",
  "        imports: [_react],",
  "        filename: '%%FILENAME%%'",
  "    });",
  "",
  "    return t(Component, id);",
  "}",
  "",
  "class __Button extends _react.Component {",
  "    render() {",
  "        return (<Text style={{ color: 'blue' }}>Test</Text>);",
  "    }",
  "",
  "}",
  "",
  "const Button = wrapComponent('Button', __Button);",
  "",
  "",
  "export default Button;",
]
`;

exports[`function as const, should transform 1`] = `
Array [
  "import { TouchableNativeFeedback, Text } from 'react-native';",
  "import React, { Component, PropTypes } from 'react';",
  "",
  "import _react from 'react';",
  "import _reactTransform from 'react-transform-hmr';",
  "",
  "function wrapComponent(id, Component) {",
  "    const t = _reactTransform({",
  "        components: {",
  "            [id]: {",
  "                displayName: id",
  "            }",
  "        },",
  "        locals: [module],",
  "        imports: [_react],",
  "        filename: '%%FILENAME%%'",
  "    });",
  "",
  "    return t(Component, id);",
  "}",
  "",
  "class __Button extends _react.Component {",
  "    render() {",
  "        let { children, onPress } = this.props;",
  "        return (<TouchableNativeFeedback onPress={onPress}>",
  "        <Text style={{ color: 'blue' }}>",
  "            {children}",
  "        </Text>",
  "    </TouchableNativeFeedback>);",
  "    }",
  "",
  "}",
  "",
  "const Button = wrapComponent('Button', __Button);",
  "",
  "",
  "export default Button;",
]
`;

exports[`function, should transform 1`] = `
Array [
  "import { TouchableNativeFeedback, Text } from 'react-native';",
  "import React, { Component, PropTypes } from 'react';",
  "",
  "import _react from 'react';",
  "import _reactTransform from 'react-transform-hmr';",
  "",
  "function wrapComponent(id, Component) {",
  "    const t = _reactTransform({",
  "        components: {",
  "            [id]: {",
  "                displayName: id",
  "            }",
  "        },",
  "        locals: [module],",
  "        imports: [_react],",
  "        filename: '%%FILENAME%%'",
  "    });",
  "",
  "    return t(Component, id);",
  "}",
  "",
  "class __Comp extends _react.Component {",
  "    render() {",
  "        let { children, onPress } = this.props;",
  "        return (<TouchableNativeFeedback onPress={onPress}>",
  "        <Text style={{ color: 'blue' }}>",
  "            {children}",
  "        </Text>",
  "    </TouchableNativeFeedback>);",
  "    }",
  "",
  "}",
  "",
  "const Comp = wrapComponent('Comp', __Comp);",
  "export default Comp;",
]
`;

exports[`functional component like function with non-jsx body, should not change 1`] = `
Array [
  "export default (({ number }) => number * 2);",
]
`;

exports[`multiple components, should change 1`] = `
Array [
  "import { TouchableNativeFeedback, Text } from 'react-native';",
  "import React, { Component, PropTypes } from 'react';",
  "",
  "import _react from 'react';",
  "import _reactTransform from 'react-transform-hmr';",
  "",
  "function wrapComponent(id, Component) {",
  "    const t = _reactTransform({",
  "        components: {",
  "            [id]: {",
  "                displayName: id",
  "            }",
  "        },",
  "        locals: [module],",
  "        imports: [_react],",
  "        filename: '%%FILENAME%%'",
  "    });",
  "",
  "    return t(Component, id);",
  "}",
  "",
  "class __Button extends _react.Component {",
  "    render() {",
  "        let { children, onPress } = this.props;",
  "        return (<TouchableNativeFeedback onPress={onPress}>",
  "        <Text style={{ color: 'blue' }}>",
  "            {children}",
  "        </Text>",
  "    </TouchableNativeFeedback>);",
  "    }",
  "",
  "}",
  "",
  "export const Button = wrapComponent('Button', __Button);",
  "",
  "class __Box extends _react.Component {",
  "    render() {",
  "        let { children, onPress } = this.props;",
  "        return (<TouchableNativeFeedback onPress={onPress}>",
  "        {children}",
  "    </TouchableNativeFeedback>);",
  "    }",
  "",
  "}",
  "",
  "export const Box = wrapComponent('Box', __Box);",
]
`;

exports[`no parameters, should change 1`] = `
Array [
  "import { TouchableNativeFeedback, Text } from 'react-native';",
  "import React, { Component, PropTypes } from 'react';",
  "",
  "import _react from 'react';",
  "import _reactTransform from 'react-transform-hmr';",
  "",
  "function wrapComponent(id, Component) {",
  "  const t = _reactTransform({",
  "    components: {",
  "      [id]: {",
  "        displayName: id",
  "      }",
  "    },",
  "    locals: [module],",
  "    imports: [_react],",
  "    filename: '%%FILENAME%%'",
  "  });",
  "",
  "  return t(Component, id);",
  "}",
  "",
  "class __Button extends _react.Component {",
  "  render() {",
  "    return (<Text style={{ color: 'blue' }}>Test</Text>);",
  "  }",
  "",
  "}",
  "",
  "const Button = wrapComponent('Button', __Button);",
  "",
  "",
  "export default Button;",
]
`;

exports[`non default components, should change 1`] = `
Array [
  "import { TouchableNativeFeedback, Text } from 'react-native';",
  "import React, { Component, PropTypes } from 'react';",
  "",
  "import _react from 'react';",
  "import _reactTransform from 'react-transform-hmr';",
  "",
  "function wrapComponent(id, Component) {",
  "    const t = _reactTransform({",
  "        components: {",
  "            [id]: {",
  "                displayName: id",
  "            }",
  "        },",
  "        locals: [module],",
  "        imports: [_react],",
  "        filename: '%%FILENAME%%'",
  "    });",
  "",
  "    return t(Component, id);",
  "}",
  "",
  "class __Button extends _react.Component {",
  "    render() {",
  "        let { children, onPress } = this.props;",
  "        return (<TouchableNativeFeedback onPress={onPress}>",
  "        <Text style={{ color: 'blue' }}>",
  "            {children}",
  "        </Text>",
  "    </TouchableNativeFeedback>);",
  "    }",
  "",
  "}",
  "",
  "export const Button = wrapComponent('Button', __Button);",
]
`;

exports[`non toplevel, should not change 1`] = `
Array [
  "storiesOf('Welcome', module).add('to Storybook', () => <Welcome showApp={linkTo('Button')} />);",
]
`;

exports[`simple function with destructed param 1`] = `
Array [
  "import { TouchableNativeFeedback, Text } from 'react-native';",
  "import React, { Component, PropTypes } from 'react';",
  "",
  "const renderItem = ({ item: { date } }) => <View>{date}</View>;",
  "",
  "export default class Button extends Component {",
  "    render() {",
  "        return <TouchableNativeFeedback onPress={this.props.onPress}>",
  "                <Text style={{ color: 'green' }}>",
  "                    {this.props.title}",
  "                </Text>",
  "            </TouchableNativeFeedback>;",
  "    }",
  "}",
]
`;

exports[`simple function with more than on 1 parameter, should not change 1`] = `
Array [
  "export default ((number, multiplier) => number * multiplier);",
]
`;

exports[`simple function, should not change 1`] = `
Array [
  "export default (number => number * 2);",
]
`;
